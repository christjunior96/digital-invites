// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Invitation {
  id              String   @id @default(cuid())
  title           String
  address         String
  date            DateTime
  time            String
  description     String?
  backgroundImage String?
  contactInfo     String?
  spotifyPlaylist String?
  photoUploadLink String?

  // Beziehungen
  userId String
  user   User    @relation(fields: [userId], references: [id])
  guests Guest[]
  invitationQuestions InvitationQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Guest {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  isCouple    Boolean  @default(false)
  plusOne     Boolean? // null für Paare, true/false für Einzelpersonen
  plusOneAllowed Boolean?
  isAttending Boolean?
  notes       String?

  // Beziehungen
  invitationId String
  invitation   Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  answers      GuestAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String?
  passwordHash String
  contactInfo  String?

  invitations Invitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Fragen & Antworten für Einladungen

enum QuestionType {
  TEXT
  SINGLE
  MULTI
}

model Question {
  id        String        @id @default(cuid())
  prompt    String
  type      QuestionType

  // Beziehungen
  options             QuestionOption[]
  invitationQuestions InvitationQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvitationQuestion {
  id            String      @id @default(cuid())
  invitationId  String
  questionId    String
  position      Int         @default(0)
  required      Boolean     @default(false)

  // Beziehungen
  invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers    GuestAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionOption {
  id         String   @id @default(cuid())
  questionId String
  label      String
  position   Int      @default(0)

  // Beziehungen
  question       Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerOptions  GuestAnswerOption[]
}

model GuestAnswer {
  id                     String   @id @default(cuid())
  guestId                String
  invitationQuestionId   String
  textAnswer             String?
  personIndex            Int      @default(1)

  // Beziehungen
  guest              Guest              @relation(fields: [guestId], references: [id], onDelete: Cascade)
  invitationQuestion InvitationQuestion @relation(fields: [invitationQuestionId], references: [id], onDelete: Cascade)
  selectedOptions    GuestAnswerOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuestAnswerOption {
  id            String         @id @default(cuid())
  guestAnswerId String
  optionId      String

  // Beziehungen
  guestAnswer GuestAnswer   @relation(fields: [guestAnswerId], references: [id], onDelete: Cascade)
  option      QuestionOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
}
